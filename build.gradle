buildscript {
    ext.kotlinVersion = '1.3.20'
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'com.github.rodm', name: 'gradle-teamcity-plugin', version: '1.2'
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: "${kotlinVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.github.rodm.teamcity-server'
apply plugin: 'idea'

group = 'org.jetbrains.teamcity.github'

version = "$System.env.BUILD_NUMBER"

if (version.length() == 0 || version == 'null') {
    version = "SNAPSHOT"
}

ext {
    teamcityDir = "$rootDir/servers/TeamCity-${TeamCityVersion}"
    teamcityDataDir = "$rootDir/data/" + (
            (TeamCityVersion ==~ /(\d+\.\d+).*/) ?
            ((TeamCityVersion =~ /(\d+\.\d+).*/)[0][1])
            : TeamCityVersion
    )
    teamcityJavaHome = System.properties['java.home']
}

if (TeamCityDir != null && TeamCityDir != "") {
    ext.teamcityDir = TeamCityDir
    ext.teamcityDataDir = "$teamcityDir/data"
}

/*
 * Copyright 2000-2021 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Remove repositories added by plugins
project.plugins.withType(JavaPlugin) {
    project.repositories.clear()
}

repositories {
    maven { url "https://download.jetbrains.com/teamcity-repository" }
    maven {
        url "https://packages.jetbrains.team/maven/p/tc/maven"
        credentials {
            username System.getenv("SPACE_APP_CLIENTID")
            password System.getenv("SPACE_APP_SECRET")
        }
    }
    mavenCentral()
    mavenLocal()
}

configurations {
}

dependencies {
    provided('org.eclipse.mylyn.github:org.eclipse.egit.github.core:4.1.0.201509280440-r') {
        transitive = false
    }
    provided(group: 'org.jetbrains.teamcity.internal', name: 'server', version: "${TeamCityVersion}")
    provided(group: 'org.jetbrains.teamcity.internal', name: 'web', version: "${TeamCityVersion}")
    provided(group: 'org.jetbrains.teamcity', name: 'oauth', version: "${TeamCityVersion}")
    provided(group: 'org.jetbrains.teamcity', name: 'server-web-api', version: "${TeamCityVersion}")
    compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    testCompile (group: 'junit', name: 'junit', version: "4.12")
    testCompile (group: 'org.testng', name: 'testng', version: "6.14.3")

    testCompile 'org.assertj:assertj-core:2.2.0'

    // For Server-side Integration tests
    if (file("$teamcityDir").exists()) {
        testCompile files("$teamcityDir/devPackage/tests/tests-integration.jar")
        testCompile fileTree(dir: "$teamcityDir/webapps/ROOT/WEB-INF/lib/", include: '*.jar')
    }
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

test {
    useTestNG()
}

teamcity {
    version = TeamCityVersion

    server {
        descriptor {
            name = project.name
            displayName = 'GitHub Commit Hooks'
            version = project.version
            vendorName = 'JetBrains'
            vendorUrl = 'https://www.jetbrains.com/'
            description = 'Allows installing GitHub webhooks for GitHub repositories used by TeamCity VCS roots'

            useSeparateClassloader = true
        }

        environments {
            teamcityDev {
                version = TeamCityVersion
                homeDir = file(teamcityDir)
                dataDir = file(teamcityDataDir)
                javaHome = file(teamcityJavaHome)
                serverOptions '-Xdebug'
                serverOptions '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5500'

                serverOptions '-Dteamcity.development.mode=true'
                serverOptions '-Dteamcity.development.shadowCopyClasses=true'
            }

        }
    }

}

// Do not include version into plugin archive name
project.tasks.getByName('serverPlugin').version = ''

if (!file("$teamcityDir").exists()) {
    logger.warn("No TeamCity installation found at '$teamcityDir', integration tests would be skipped");
} else {
    sourceSets {
        test.kotlin.srcDirs += 'src/test-integration/kotlin'
    }
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}

