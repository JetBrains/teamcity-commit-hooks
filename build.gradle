import java.nio.file.Paths

buildscript {
    ext.kotlinVersion = '1.7.20'
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'io.github.rodm', name: 'gradle-teamcity-plugin', version: '1.5.2'
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: "${kotlinVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'io.github.rodm.teamcity-server'
apply plugin: 'idea'

group = 'org.jetbrains.teamcity.github'

initializeWorkspace()

ext {
    pluginVersion = project.hasProperty("PluginVersion") ? "$PluginVersion"
                                                         : "SNAPSHOT"
    TeamCityVersion = anyParam('teamcityVersion') ?: "SNAPSHOT"

    teamcityDir = "$rootDir/servers/TeamCity-${TeamCityVersion}"
    teamcityDataDir = "$rootDir/data/" + (
            (TeamCityVersion ==~ /(\d+\.\d+).*/) ?
            ((TeamCityVersion =~ /(\d+\.\d+).*/)[0][1])
            : TeamCityVersion
    )
    teamcityJavaHome = System.properties['java.home']
}

def localRepo = anyParamPath('TC_LOCAL_REPO')


// Remove repositories added by plugins
project.plugins.withType(JavaPlugin) {
    project.repositories.clear()
}

repositories {
    if (localRepo) {
        maven {
            name = "local-teamcity-artifacts"
            url "file:///${localRepo}"
        }
    }
    maven { url "https://download.jetbrains.com/teamcity-repository" }
    maven {
        url "https://packages.jetbrains.team/maven/p/tc/maven"
        credentials {
            username System.getenv("SPACE_APP_CLIENTID")
            password System.getenv("SPACE_APP_SECRET")
        }
    }
    mavenCentral()
    mavenLocal()
}

configurations {
}

dependencies {
    provided('org.eclipse.mylyn.github:org.eclipse.egit.github.core:4.1.0.201509280440-r') {
        transitive = false
    }
    provided(group: 'org.jetbrains.teamcity.internal', name: 'server', version: "${TeamCityVersion}")
    provided(group: 'org.jetbrains.teamcity.internal', name: 'web', version: "${TeamCityVersion}")
    provided(group: 'org.jetbrains.teamcity', name: 'oauth', version: "${TeamCityVersion}")
    provided(group: 'org.jetbrains.teamcity', name: 'server-web-api', version: "${TeamCityVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    testImplementation('org.assertj:assertj-core:2.2.0')
    testImplementation(group: 'org.jetbrains.teamcity.internal', name: 'integration-test', version: "${TeamCityVersion}")
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

test {
    useTestNG()
}

teamcity {
    version = TeamCityVersion
    allowSnapshotVersions = true

    server {
        descriptor {
            name = project.name
            displayName = 'GitHub Commit Hooks'
            version = project.version
            vendorName = 'JetBrains'
            vendorUrl = 'https://www.jetbrains.com/'
            description = 'Allows installing GitHub webhooks for GitHub repositories used by TeamCity VCS roots'

            useSeparateClassloader = true
        }

        environments {
            teamcityDev {
                version = TeamCityVersion
                allowSnapshotVersions = true
                homeDir = file(teamcityDir)
                dataDir = file(teamcityDataDir)
                javaHome = file(teamcityJavaHome)
                serverOptions '-Xdebug'
                serverOptions '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5500'

                serverOptions '-Dteamcity.development.mode=true'
                serverOptions '-Dteamcity.development.shadowCopyClasses=true'
            }

        }
    }

}

// Do not include version into plugin archive name
project.tasks.getByName('serverPlugin').version = ''

sourceSets {
    test.kotlin.srcDirs += 'src/test-integration/kotlin'
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}

def anyParamPath(String... names) {
    def param = anyParam(names);
    if (param == null || param.isEmpty())
        return null
    return (Paths.get(param).isAbsolute()) ?
           Paths.get(param) : getRootDir().toPath().resolve(param)
}

def anyParam(String... names) {
    def param
    try {
        param = names.findResult {
            project.hasProperty(it) ? project.getProperty(it) : System.getProperty(it) ?: System.getenv(it) ?: null
        }
        if (param == null || param.isEmpty())
            param = null
    } finally {
        println("AnyParam: $names -> $param")
    }
    return param
}

def initializeWorkspace() {
    if (System.getProperty("idea.active") != null) {
        println "Attempt to configure workspace in IDEA"
        def coreVersionProperties = project.projectDir.toPath().parent.parent.resolve(".version.properties")
        if (coreVersionProperties.toFile().exists()) {
            def p = new Properties().tap {
                it.load(new FileInputStream(coreVersionProperties.toFile()))
            }
            p.forEach { k,v ->
                System.setProperty(k, v);
            }
        }
    }
}